@* --------------------OnScreenKeyboard.razor---------------------------- *@
@using oskPro.Services;
@inject IOskService OskService
@implements IDisposable
<MudPaper Elevation="10" Class="@($"osk-container {PositionClass}")">
    <MudIconButton Icon="@ToggleIcon" Class="@($"osk-toggle-position {PositionClass}")" OnClick="@TogglePosition" />
    <!-- Wrap the keyboards in a flex container -->
    <div class="keyboard-wrapper" style="display: flex; justify-content: center;">
        <!-- Standard Keyboard -->
        <MudGrid Spacing="0" Style="padding: 5px; display: flex; flex-direction: column; align-items: center;">
            @foreach (var row in KeyboardLayout)
            {
                <MudItem xs="12" Style="display: flex; justify-content: center; margin: 2px 0;">
                    @foreach (var key in row)
                    {
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                            Class="@($"osk-key {GetKeyClass(key)} {(IsKeyActive(key) ? "active" : "")}")"
                            OnClick="@(() => PressKey(key))"
                            Style="@($"min-width: {GetKeyWidth(key)}; text-transform:none !important;")">
                            @GetDisplayKey(key)
                        </MudButton>
                    }
                </MudItem>
            }
        </MudGrid>

        <!-- Conditionally render the Numpad next to the standard keyboard -->
        @if (!ShowNumpad)
        {
            <MudGrid Spacing="0"
                Style="padding: 5px; display: flex; flex-direction: column; align-items: center; margin-left: 20px;">
                @foreach (var row in KeyboardWithNumpad)
                {
                    <MudItem xs="12" Style="display: flex; justify-content: center; margin: 2px 0;">
                        @foreach (var key in row)
                        {
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                Class="@($"osk-key {GetKeyClass(key)} {(IsKeyActive(key) ? "active" : "")}")"
                                OnClick="@(() => PressKey(key))"
                                Style="@($"min-width: {GetKeyWidth(key)}; text-transform:none !important;")">
                                @GetDisplayKey(key)
                            </MudButton>
                        }
                    </MudItem>
                }
            </MudGrid>
        }
    </div>
</MudPaper>

@code {
    [Parameter] public bool ShowNumpad { get; set; }
    private bool _isShiftActive;
    private bool _isCapsLock;
    private bool _isAltGrActive;
    private HashSet<string> _activeKeys = new();
    private static readonly List<List<string>> StandardKeyboard = new()
{
new() { "Tab", "q", "w", "e", "r", "t", "z", "u", "i", "o", "p", "ü", "+", "#" },
new() { "Caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö", "ä", "Enter" },
new() { "Shift", "<", "y", "x", "c", "v", "b", "n", "m", ",", ".", "-", "Shift" },
new() { "Ctrl", "Win", "Alt", "Space", "AltGr", "Menu", "Ctrl" }
};

    private static readonly List<List<string>> KeyboardWithNumpad = new()
{
new() { "7", "8", "9", "/" },
new() { "4", "5", "6", "*" },
new() { "1", "2", "3", "-" },
new() { "0", ".", "⬅", "+" }
};

    private List<List<string>> KeyboardLayout => ShowNumpad ? KeyboardWithNumpad : StandardKeyboard;

    private string GetDisplayKey(string key) =>
    OskService.GetDisplayKey(key, _isShiftActive, _isCapsLock, _isAltGrActive);

    private string GetKeyClass(string key)
    {
        return key switch
        {
            "Ctrl" or "Alt" or "Win" or "AltGr" or "Menu" => "key-modifier",
            "Shift" or "Caps" or "Enter" or "Tab" or "Backspace" => "key-special",
            "Space" => "key-space",
            _ => "key-standard"
        };
    }

    private string GetKeyWidth(string key)
    {
        return key switch
        {
            "Backspace" => "140px",
            "Tab" => "110px",
            "#" => "80px",
            "Caps" => "120px",
            "Enter" => "150px",
            "Shift" => "140px",
            "Space" => "430px",
            "Ctrl" or "Alt" or "Win" or "AltGr" or "Menu" => "100px",
            _ => "80px"
        };
    }

    private bool IsModifierKey(string key) =>
    new[] { "Shift", "Ctrl", "Alt", "Win", "AltGr", "Menu", "Caps" }.Contains(key);

    private bool IsKeyActive(string key)
    {
        if (key == "Shift") return _isShiftActive;
        if (key == "Caps") return _isCapsLock;
        if (key == "AltGr") return _isAltGrActive;
        return _activeKeys.Contains(key.ToLower());
    }

    private void PressKey(string key)
    {
        HandleModifierKey(key);
        if (!IsModifierKey(key))
        {
            var actualKey = GetDisplayKey(key);
            if (key == "Tab")
            {
                // Special handling is done in KeyPressed
                OskService.KeyPressed(actualKey, false);
                return;
            }
            OskService.KeyPressed(actualKey, false);
            _activeKeys.Add(key.ToLower());
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ =>
            {
                _activeKeys.Remove(key.ToLower());
                InvokeAsync(StateHasChanged);
            });
            ResetModifiers(key);
        }
    }

    private void HandleModifierKey(string key)
    {
        switch (key)
        {
            case "Shift":
                _isShiftActive = !_isShiftActive;
                break;
            case "Caps":
                _isCapsLock = !_isCapsLock;
                break;
            case "AltGr":
                _isAltGrActive = !_isAltGrActive;
                break;
        }
    }

    private void ResetModifiers(string key)
    {
        if (!_isCapsLock && key != "Shift") _isShiftActive = false;
        if (key != "AltGr") _isAltGrActive = false;
    }

    private void HandlePhysicalKeyPress(string key, bool isModifier)
    {
        if (isModifier)
        {
            HandleModifierKey(key);
        }
        else
        {
            _activeKeys.Add(key.ToLower());
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ =>
            {
                _activeKeys.Remove(key.ToLower());
                InvokeAsync(StateHasChanged);
            });
        }
    }

    protected override void OnInitialized()
    {
        OskService.OnVisibilityChanged += StateHasChanged;
        OskService.OnPhysicalKeyPress += HandlePhysicalKeyPress;
    }

    public void Dispose()
    {
        OskService.OnVisibilityChanged -= StateHasChanged;
        OskService.OnPhysicalKeyPress -= HandlePhysicalKeyPress;
    }
    private bool _isTopPosition = false;
    private string PositionClass => _isTopPosition ? "top-position" : "bottom-position";
    private string ToggleIcon => _isTopPosition ? Icons.Material.Filled.ArrowDownward : Icons.Material.Filled.ArrowUpward;

    private void TogglePosition()
    {
        _isTopPosition = !_isTopPosition;
        StateHasChanged();
    }
}
